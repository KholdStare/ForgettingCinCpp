Outline of main points of presentation.

- Forgetting the C in C++
    - Indended for those comfortable with C
    - Overview of C++, and good C++ style, from a C programmer's perspective
    - Emphasis on fixing habbits learnt from C that are counter-productive or dangerous in C++
    - More in-depth guidelines for C++ can be found in books mentioned later

- History of C++

- Outline of compilation model for C and then C++
    - To understand some problems, the playing field should be known
    - Need to know how the code that is written compiles to executables

    + compilation/translation units
    + preprocessor          -> resolves includes/defines
    + compiler/assembler    -> compiles translation unit to object file
    + linker                -> links all object file into single executable

- Things to watch out for in C++
    - Some features do not jive with C-like programming
    - function overloading TODO: check if C99+ supports
    - inheritance
    - exceptions

- Avoid #define constants
    - Carries no type information
    - Ambiguous when used with function overloads, and implicit conversions
    + Use const globals instead (note about const correctness)

- Avoid macros
    - Source of constant not visible to compiler leading to errors in obscure location which you then need to trace back to the macro
    - Copy-pastes arguments as text.
    - Easy to abuse with invalid expression which become valid after substitution. Leads to obfuscation
        #define MAGIC( a, b ) (a < b) ? (a + b) : (a - b)

        int a = MAGIC( 2+(1 , 1)+3 );
        int a = 2+(1 < 1)+3 ? 2+(1 + 1)+3 : 2+(1 - 1)+3
    - Bracketing problems. Tricky, ugly, relies on human programmer catching all possibilities of abuse
    - Can create undefined behaviour or unintentional behaviour as a result

    + Use inline functions. If performance is a concern, this takes care of that
        inline int max ( int a, int b ) {
            return a < b ? b : a;
        }

    - What about generality? The same macro can be reused for different types (Can we live with drawbacks just for this?)
    + No need to, use template functions!

- Declare variables when needed
    - Declaring everything in the kitchen sink at beginning of scope was required in C
    - If function is large, it is often tedious to keep track of the mess. Unused variables?
    + In C99 and C++ variables can and should be declared when needed, as it helps the compiler to optimize code based on usage.

- Use new/delete, not malloc/free
    + if dynamically sized array is needed (mention SV bridge for sigma) just use std::vector<Type>

- Prefer references over pointers
    + Cannot be null (~ish), so less null-checks (perhaps give example of how it is passed down?)
    + non-reassignable
    - use pointers where results null object is a valid option, and need re-assignability
    + & for arguments that are expected to be changed, const& for everything else
    + (mention better/tighter specification, helps programmers, avoids bugs)

- Use namespaces
    - Some concerns in C when trying to uniquely name functions across many files and libraries
    - Somewhat alleviated through classes ( since methods are part of another namespace )
    + Names are searched bottom up from nearest scope to global, through namespaces
    + Use namepaces for your projects/subsections to organize functions/classes into groups, without conflicts

- Use STL ( mention at end of first talk )

- Classes overview
    + members
    + methods
    + constructors
    + destructor (very important)
    + object ( instance ) vs class 
    + allocation on stack
    + allocation on heap through new/delete, allows polymorphism
    + this pointer inside of methods

- Use initializer lists in constructors (don't forget copy constructors!)

- Copy constructors
    - if class has pointers, default constructor will blindly copy the pointer, not the contents

- Use RAII
    + through use of destructors
    + smart pointer example (new delete), with exceptions

- Inheritance
    + explain simple inheritance, (no virtual methods yet)
    + mention polymorphism


- Classes (again) behind the scenes
    + members are in struct, one per object( instance of class ),
    + methods are standalone, separate from the object
    + when a method is called, object is implicitly passed in, as *this* into method
    + e.g. when calling object->someMethod(arg), it is actually someMethod(object, arg);

    + describe location of members of each calss in inheritance hierarchy
    - class C : A, B
    + a pointer to object of type can be pointing 

- Casting 
    - refrain from using the C-style bracket cast
    - Very hard to see and search for in code
    - Less control and safety
    + Use one of static_cast, dynamic_cast or reinterpret_cast (also there is const_cast)

- Follow const-correctness

- Use STL ( go into detail )

